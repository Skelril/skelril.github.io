{"version":3,"file":"static/webpack/static/development/pages/voip/current-users.js.c23272059a67ec2ee378.hot-update.js","sources":["webpack:///./components/VoIPViewer.js"],"sourcesContent":["import React from 'react'\nimport 'isomorphic-unfetch'\n\nexport default class VoIPViewer extends React.Component {\n  async componentDidMount () {\n    // eslint-disable-next-line no-undef\n    // const res = await fetch('https://www.nfoservers.com/query/mstat.pl?id=pktloss')\n      // const json = await res.json()\n\n    await await new Promise(resolve => setTimeout(resolve, 3000));\n\n    this.setState(state => ({\n      rootChannel: {\n        name: \"Packet Loss Gaming\",\n        users: [\"Dark_Arc\"],\n        channels: [\n          {\n            name: \"Game Lobby 1\",\n            users: [\"Cow_Fu\"],\n            channels: []\n          }\n        ]\n      }\n    }));\n  }\n\n  getChannelIndent = (channelLevel) => {\n    const LEVEL_INDENT_AMT = 20;\n    return channelLevel * LEVEL_INDENT_AMT\n  }\n\n  renderChannelName = (channelData) => {\n    return <span className=\"bold\"><span className=\"oi oi-people pr-2\" title=\"icon name\" aria-hidden=\"true\"></span>{channelData.name}</span>\n  }\n\n  renderChannelUsers = (channelData, channelLevel) => {\n    let users = []\n\n    channelData.users.forEach((user) => {\n      let userStyle = {\n         marginLeft: (this.getChannelIndent(channelLevel + 1)) + 'px'\n      }\n\n      users.push(<div style={userStyle}><span className=\"oi oi-person pr-2\" title=\"icon name\" aria-hidden=\"true\"></span>{user}</div>);\n    })\n\n    return users\n  }\n\n  renderSubChannels = (channelData, channelLevel) => {\n    let subChannels = []\n\n    channelData.channels.forEach((channel) => {\n      subChannels.push(this.renderChannel(channel, channelLevel + 1))\n    })\n\n    return subChannels\n  }\n\n  renderChannel = (channelData, channelLevel) => {\n    let channelStyle = {\n      marginLeft: this.getChannelIndent(channelLevel) + 'px'\n    }\n\n    return (\n      <div style={channelStyle}>\n        {this.renderChannelName(channelData)}\n        {this.renderChannelUsers(channelData, channelLevel)}\n        {this.renderSubChannels(channelData, channelLevel)}\n      </div>\n    )\n  }\n\n\n  render() {\n    let channelPreview\n\n    if (this.state) {\n      channelPreview = this.renderChannel(this.state.rootChannel, 0)\n    } else {\n        channelPreview = (\n          <div class=\"d-flex justify-content-center\">\n            <div class=\"spinner-border\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        )\n    }\n\n    return (\n      <div>\n        {channelPreview}\n      </div>\n    )\n  }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;;;;;;;;;;;;;;;AA/DA;AAAA;AAAA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAJA;AADA;AAAA;AACA;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA3FA;AACA;;;;;A","sourceRoot":""}